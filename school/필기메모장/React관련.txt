1. Node.js설치(환경변수 체크하기)
사용자에 대한 사용자변수(U)
Path : C:\Users\ikaro\AppData\Roaming\npm 설정되어있는지 체크

시스템 변수(S)
Path : C:\Program Files\nodejs\ 설정되어있는지 체크


2. yarn, pnpm (패키지 관리자) 필요하면 설치하기
npm : 노드 패키지 관리자
yarn : 페이스북에서 개발한 패키지 관리자
pnpm : 가장 최근에 만들어진 노드 패키지 관리자. npm보다 2배 빠름.

yarn설치하기: 
npm install --global yarn => yarn패키지 설치

pnpm설치하기: 
npm install --global pnpm => pnpm패키지 설치


**전역(--global)으로 설치하는 경우는 
C:\Users\ikaro\AppData\Roaming\npm폴더 안에 설치됨

**중복으로 설치된 패키지를 정리하는 경우
npm dedupe

======================================

yarn, pnpm 관리자를 통해 패키지를 설치하는 경우
package.json에 설정된 모든 패키지를 설치하는 경우
yarn install

특정 패키지만 설치하는 경우
yarn [global] add 패키지명@버전
pnpm [global] add 패키지명@버전

설치한 패키지들 업데이트
pnpm upgrade

설치한 패키지 삭제
pnpm remove 패키지명


넥스트프레임워크 리액트 프로젝트 생성하기
npx create-next-app@latest

What is your project name? > 프로젝트명입력 (예: first_app)
Would you like to use TypeScript? > No
Would you like to use ESLint? > Yes
**ESLint : 자바스크립트에서 발생되는 문제를 분석하는 분석 도구
Would you like to use Tailwind CSS? > No
Would you like to use src/ directory? > Yes
Would you like to use App router? (recommended) > No
**Next에서 제공하는 앱 라우터의 사용여부
Would you like to customize the default import alias (@/*)? > NO
**모듈을 임포트할 때 별명을 커스터마이징 처리할 것인지의 여부


설치 후 프로젝트 폴더 안으로 작업디렉토리 이동할 것
cd first_app

npm프로젝트 실행하기
npm run dev

first_app\src\pages 폴더 안의 index.js파일이 실행됨.
http://localhost:3000 으로 실행할 것

=====================================================

비트(Vite) 빌드 도구를 사용한 리액트 프로젝트 생성하기

npm create vite@latest
? Project name: vi_first_app
Select a framework : > React 선택
Select a variant : > JavaScript 선택

cd vi_first_app

npm install : 필요한 패키지 설치하는 작업
**node_modules가 설치됨

npm run dev

http://localhost:5173 으로 실행할 것

=====================================================

컴포넌트(Component)란 : 사용자인터페이스를 구성하는 재사용 가능한 빌딩 블럭임. 
함수형 컴포넌트, 클래스형 컴포넌트가 있음
**클래스 컴포넌트는 권장하지 않음.

JSX란 : JavaScript + XML 또는 JavaScript Extension 임.
JavaScript와 마크업언어가 협쳐진 문법임.
마크업언어 : 
HTML => 데이터를 표현하는 언어
XML => 데이터를 기술하는 언어(마크업을 정의하기 위한 언어)

렌더링이란:  사용자인터페이스(UI-User Interface)의 업데이트와 관련된 프로세스를 말하며, 상태(State)가 변경될 때마다 UI를 업데이트해야 한다. 이때, 리액트는 변경된 상태를 기반으로 UI의 특정 부분을 다시 그리는 과정을 거치는데, 이 과정을 "렌더링"이라고 한다.

=====================================================

함수형 컴포넌트 형식

형식1: 
function App(){
   return(
      <>
       이 안에 html태그 기술
      </>
   );
}

형식2:
const App = () =>{
   return(
      <>
       이 안에 html태그 기술
      </>
   );

} 
**반드시 return() 함수안에는 1개의 엘리먼트만 기술해야 함.
return(
<>
<h1>안녕</h1>
<p>하이</p>
</>
);
**<> </>의 태그 한 개로 묶은 값이기에 가능

return(
<h1>안녕</h1>
<p>하이</p>
);
**태그가 2개 이므로 에러.

==============================================
클래스형 컴포넌트 형식
함수에서 클래스로 변환하기


//반드시 패키지 import해야 함.
import React from 'react'
//경우에 따라 react-dom도 import해야 함
import ReactDOM from 'react-dom/client'

-------------------------------------------------------
React.Component를 확장하는 동일한 이름의 ES6 class를 생성한다.
render()라고 불리는 빈 메서드를 추가한다.
함수의 내용을 render() 메서드 안으로 옮긴다.
render() 내용 안에 있는 props를 this.props로 변경합니다.
남아있는 빈 함수 선언을 삭제한다.
-------------------------------------------------------
형식: 
{export default} class 클래스명 extends React.Component {
  render(){
    return(
      <>
        <h1 id="titleHTag">클래스형 컴포넌트</h1>
      </>
    )
  }
}

// export default App

==============================================

**명명규칙
함수 : 파스칼기법 (첫글자 대문자, 결합단어 첫 글자 대문자)
속성, 변수, 이벤트핸들러 : 카멜기법 (첫글자 소문자, 결합단어 첫 글자 대문자)
예)
이벤트핸들러 : onclick(X) => onClick(O)
속성 : class(X) => className(O)
**반드시 엘리먼트의 시작과 종료가 존재해야 한다.
<br> (X) =>  <br /> (O)

자바스크립트의 표현식: {}
ex : {속성값}=>  {props.name}
{함수호출문} => {getName()}
{연산식} => {tf==true ? '참' : '거짓' }


vite 도구를 이용한 리액트프로젝트에는 index.html이나 js파일들이나 이러한 것들이 명시적으로 잘 보여진다.
next 도구를 이용한 리액트프로젝트에는 index.html파일을 대신하는 파일은 src/pages 폴더의 _document.js파일이며,
전역 css 파일을 저장하는 곳은 src/styles 폴더이며, 해당 style을 연결할 수 있는 곳은 src/pages 폴더의 _app.js파일이다.
또한 전역 이미지 파일들을 저장하는 곳은 public폴더이다.

==============================================

styling 과 css
1. 일반적인 (전역) 외부 css방법 : src/styles파일에 기술하고 _app.js에 모듈로 추가해준다.
2. 지역 모듈 css기법 : src/styles 폴더에 모듈명.module.css로 파일명을 만들어 준다. (**모듈명은 파스칼기법으로)
해당 css는 반드시 import하는 곳에서 사용할 때 css의 이름과 동일하게 기술해주어야 한다.
------------------- 예시 --------------------------------
Todo.module.css안에 기술된 내용
.ContentList {
	margin : 10px;
	background-color : #555;
	color : #fff;
}

import stys from '../styles/Todo.module.css';
/*생략...*/

<ol>
	<li className={stys.ContentList} >항목1</li>

/*생략...*/
</ol>
/*생략...*/
------------------- 예시 --------------------------------

3. 인라인 방법
<li style={{margin: 10+'px', backgroundColor : `#555`, color : `#fff`}} >항목1</li>
<li style={{margin: `10px`, backgroundColor : `#555`, color : `#fff`}} >항목1</li>

================================================

state : 컴포넌트 내부에서 변경할 수 있는 값을 의미함.

클래스컴포넌트 : state필드로 상태값을 저장, setState()메소드로 상태값을 변경/설정 가능

rendering이나 DidMount()등등 자꾸만 2번 처리가 되는 이유:
next.config.mjs파일에 프로젝트의 reactStrictMode: true,// 리액트모드가 엄격모드로 처리되고 있어서임.
reactStrictMode: false, 로 변경하고 재부팅하면 됨.

const nextConfig = {
  // reactStrictMode: true,
  reactStrictMode: false,
};

export default nextConfig;

=======================================================

전개 대입연산자(...): 
- 기존 객체나 배열을 수정하지 않고도 간단하게 새로운 객체나 배열을 만들 수 있다.
- 객체나 배열의 요소를 펼쳐서 새로운 객체나 배열을 생성하는 JavaScript의 문법이다.
- 대입 연산자 왼쪽에 사용됩니다.

전개대입연산자의 종류
1. 객체의 전개: 객체의 키-값 쌍을 펼쳐서 다른 객체에 추가한다.
예시: 
const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3 };
// obj2는 { a: 1, b: 2, c: 3 } 가 된다.


2. 배열의 전개: 배열의 요소를 펼쳐서 다른 배열에 추가한다.
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5];
// arr2는 [1, 2, 3, 4, 5] 가 된다.


3. 함수 인자의 전개: 함수에 배열을 전달할 때 사용할 수 있다.
function myFunc(a, b, c) {
    console.log(a, b, c); // 1 2 3 출력
}
const args = [1, 2, 3];
myFunc(...args); 


4.전개대입: 객체나 배열의 요소를 다른 변수에 대입할 때 사용된다.
const { a, ...rest } = { a: 1, b: 2, c: 3 };
// a는 1, rest는 { b: 2, c: 3 }가 된다.

const [first, ...others] = [1, 2, 3, 4, 5];
// first는 1, others는 [2, 3, 4, 5] 가 된다.

=======================================================

리액트 훅(Hook)이란 : 16.8 버전에서 도입된 기능(내장함수)
리액트 컴포넌트 안에서만 사용할 수 있는 'use'로 시작하는 특별한 함수를 말한다.
**리액트 훅은 함수 컴포넌트 내에서만 호출할 수 있다.(클래스 컴포넌트 사용안됨)
**반드시 리액트 모듈에서 사용할 함수를 import해주어야 한다.

useState: 함수 컴포넌트 내에서 상태를 관리하는 함수.
useEffect: 부수 효과(side effects)를 다루는데 사용되며, 컴포넌트가 렌더링될 때마다 특정 작업을 수행할 수 있다.
useContext: 컨텍스트(Context)를 사용하여 전역 데이터를 사용할 수 있게 해준다.
useReducer: useState와 비슷하지만, 더 복잡한 상태 관리를 할 때 사용된다.
useRef: DOM 요소나 다른 값에 대한 참조를 생성할 때 사용된다.
useSearchParams : get방식으로 보낸 데이터의 정보를 읽어올 수 있는 함수


**useState함수 형식 : 해당 변수의 초기값을 설정하는 함수
const [state를저장할변수, state변수의setter메소드] = useState(초기값);
예: const [cnt, setCnt] = useState(0); => cnt = 0; 


**useEffect함수 형식 : 
useEffect(() => {// 부수 효과를 수행하는 코드}, [dependencies]);
- 첫번째 매개인자(부수 효과 함수): 
  컴포넌트가 렌더링될 때마다 실행됨. 
  이 함수 내부에서 비동기 작업, 데이터 가져오기, 외부 API 호출, 이벤트 리스너 등의 작업을 수행할 수 있다.
- 두번째 매개인자(의존성 배열(dependency array)): [optional임]
  이 배열에 포함된 값들이 변경될 때만 부수 효과 함수가 다시 실행된다. 
  만약 의존성 배열을 전달하지 않으면, 부수 효과 함수는 컴포넌트가 렌더링될 때마다 매번 실행된다. 
  빈 배열을 전달하면 컴포넌트가 마운트될 때 한 번만 실행되며, 언마운트 시에 정리(clean-up) 작업을 수행할 수 있다.

======================================================

컴포넌트의 라이프 사이클
클래스형 컴포넌트: 
마운트(Mount) : 리액트의 컴포넌트가 DOM에 삽입될 때, 즉 해당 컴포넌트가 브라우저의 화면에 나타날 때의 시점을 의미.
=> componentDidMount(){} 함수를 통해 마운트시점을 알리거나 마운트될 때의 실행해야하는 기능을 정의할 수 있다. 
업데이트(Update) : 컴포넌트의 상태가 update될 때의 시점을 의미
=> componentDidUpdate(prevProps, prevState){} 함수를 통해 해당 컴포넌트의 properties나 state의 갱신을 확인할 수 있다.
언마운트(Unmount) : 리액트 컴포넌트가 DOM에서 제거될 때, 즉 해당 컴포넌트가 화면에서 사라질 때의 시점을 의미
=>componentWillUnmount(){} 함수를 통해 해당 컴포넌트가 제거되기 전에 실행해야 하는 기능을 정의할 수 있다.

함수형 컴포넌트 : 
마운트, 업데이트,언마운트의 사이클을 똑같이 가지고 있으나, 클래스형 컴포넌트처럼 해당 시점의 함수를 사용할 수 없다. 
따라서 해당 라이프 사이클에 대한 부분은 useEffect()함수를 이용하여 각 사이클 단계에 대한 설정을 할 수 있다.
마운트(Mount) : useEffect(()=>{} , []); //두번째 매개인자의 값을 []로만 전달하는 경우 마운트 시점에만 실행됨
업데이트(Update) : useEffect(()=>{} , [state값인자]); ////두번째 매개인자의 값을 state값인자로 전달하는 경우, 해당 state가 변경될 때마다 실행됨
언마운트(Unmount) : 마운트와 형식 동일하나 첫번째 매개인자의 함수 안에 return (){} 함수를 기술하면 해당 함수는 언마운트 시점에 실행됨.
useEffect(()=>{
	//마운트 시점에 실행되는 코드 기술 ...
	...

	return(){
		//언마운트 시점에 실행되는 코드 기술...
	};

} , []);

=======================================================

**package.json에서 버전 명시 기호의 의미

^18.2.5 =>  ^기호는 두번째 기술된 값부터는 다른 버전이 허용 가능하다는 의미
예: 18.5.7 (O)  18.2.7 (O) 19.0.1 (X - 첫번째 버전이 다르므로 허용 안됨.)

~18.2.5 => ~기호는 세번째 기술된 값부터는 다른 버전이 허용 가능하다는 의미
예: 18.2.1 (O) 18.1.2(X -두번째 버전이 다르므로 허용 안됨.)

>18.2.5 => 18.2.5버전보다 큰 버전만 허용(18.2.5버전 미포함)
>=18.2.5 => 18.2.5이상 버전만 허용(18.2.5버전 포함)
<18.2.5 =>  18.2.5버전보다 작은 버전만 허용(18.2.5버전 미포함)
<=18.2.5 =>  18.2.5이하 버전만 허용(18.2.5버전 포함)

=======================================================

const [render, setRender] = useState(false);

useEffect(()=> setRender(true), []);
return render ? <Component {...pageProps} /> : null ;


=======================================================

리액트 라우터란
리액트 라우터(React Router)는 리액트 애플리케이션에서 클라이언트 측 라우팅을 구현하기 위한 라이브러리임.
**라우팅 : 사용자가 애플리케이션 내에서 다른 URL로 이동할 때 해당 URL에 맞는 컴포넌트를 렌더링하는 과정을 말함.
**이러한 방식으로 페이지 간 전환이 원활하게 이루어지며, URL이 변경됨에 따라 해당하는 컴포넌트가 자동으로 렌더링됨.
**애플리케이션의 상태를 URL과 동기화하여 북마크, 뒤로가기, 앞으로 가기 등의 브라우저 기능을 쉽게 활용할 수 있도록 해준다.

React Router의 주요 구성 요소
: <BrowserRouter>, <Routes>, <Switch>, <Link> 등이 있다. 
- <BrowserRouter> :  HTML5의 History API를 사용하여 브라우저의 URL을 관리함.

1. 반드시 먼저 리액트 라우터 라이브러리의 설치가 이루어져야 한다.
npm install react-router-dom
- "dependencies"에 "react-router-dom": "^6.23.1"버전이 설치됨.

2. _app.js파일의 App함수 변경하기
/*
페이지가 변경이 되려면 컴포넌트의 상태와 렌더링 시 특정 작업을 수행해야 하므로, useState, useEffect 훅을 import해준다.
useState: 함수 컴포넌트 내에서 상태를 관리하는 함수.
useEffect: 부수 효과(side effects)를 다루는데 사용되며, 컴포넌트가 렌더링될 때마다 특정 작업을 수행할 수 있다.
*/
import { useState, useEffect } from 'react';

export default function App({ Component, pageProps }) {
  const [render, setRender] = useState(false);
  useEffect(() => setRender(true), []);
  {/*... => 전개 대입변수: 해당 변수의 값을 새로운 객체나 배열로 받을 수 있다. */}
  return render ? <Component {...pageProps} /> : null;
}

3. 브라우저 라우터설정하기
1. react-router-dom모듈 추가하기
=> import { BrowserRouter, Routes, Route } from "react-router-dom"; 


**react-router-dom 6버전 미만에는 Switch태그를 사용하였으나, 6버전 이상부터는 Routes태그를 사용함.
**또한 6버전 이상에서는 Route태그의 컴포넌트 연결은 element속성을 사용하여 연결함.
- next프레임워크 애플리케이션인 경우: index.js파일에 설정할 것
2. return ()함수 안에 <BrowerRouter>설정하기
=> return (
    <BrowserRouter>
        <Header />
        <Routes>
          <Route path="/" exact element={<Main/>}/>
          <Route path="/customer" exact element={<CustomerList/>}/>
          <Route path="/about" exact element={<About/>}/>
        </Routes>
        <Footer />
    </BrowserRouter>
  );


- vite빌드 도구로 만든 애플리케이션이나 기존 리액트프로젝트인 경우 : main.jsx파일에 설정할 것
2. ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
        <Header />
        <Routes>
          <Route path="/" exact element={<Main/>}/>
          <Route path="/customer" exact element={<CustomerList/>}/>
          <Route path="/about" exact element={<About/>}/>
        </Routes>
        <Footer />
    </BrowserRouter>
  </React.StrictMode>,
)


**6미만버전 Switch태그 사용, Route태그의 컴포넌트 연결은 component속성을 사용하여 연결함.
<BrowserRouter>
      <Switch>
        <Route exact path="/" component={Home} />
        <Route path="/about" component={About} />
        <Route component={NotFound} />
      </Switch>
</BrowserRouter>

3. Link태그나 a태그등을 이용하여 페이지 이동을 할 수 있도록 설정하기
Link태그 : 페이지 이동이 일어나지 않고 재렌더링만 됨. 속도가 빠르고, 페이지 로딩이 없다.
<Link to='/about'>회사소개</Link>


a 태그 : 페이지 이동이 일어나고 렌더링에 대한 처리도 해야하므로 속도라 Link태그보다 느리다.
<a href='/about'>회사소개</a>
=======================================================

리액트 참고 사이트:
https://ko.legacy.reactjs.org/docs/state-and-lifecycle.html



